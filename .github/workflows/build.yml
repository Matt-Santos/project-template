name: Standard Repo Workflow  

on: [push, workflow_dispatch]

permissions: write-all

jobs:
    docs:
        if: false
        name: Compile Latex Documents
        runs-on: ubuntu-latest
        steps:
          - name: Compile Latex documents
            uses: xu-cheng/latex-action@v3
            with:
                root_file: |
                    documents/*.tex
                    documents/*/*.tex
                work_in_root_file_dir: true
                continue_on_error: true
                latexmk_shell_escape: true
                latexmk_use_lualatex: true
          - name: Rename PDFs According to JobName
            run: |
                find . -type f -iname "*.pdf" | while read fname; do
                    dirname=`dirname $fname`
                    filename=`basename $fname`
                    texname=`echo $filename | sed 's/pdf/tex/'`
                    newname=`head -n 1 $dirname/$texname`
                    newname="${newname##*=}.pdf"
                    mv "${dirname}/$filename" "${dirname}/${newname}"
                done
          - name: Digitally Sign PDF Documents
            run: |
                find . -type f -iname "*.pdf" | while read fname; do
                    dirname=`dirname $fname`
                    filename=`basename $fname`
                    gpg --pinentry-mode loopback --passphrase ${{ secrets.PASSPHRASE }} --clearsign --not-dash-escaped "${dirname}/$filename"
                    mv "${dirname}/$filename".asc "${dirname}/$filename"
                    gpg --pinentry-mode loopback --passphrase ${{ secrets.PASSPHRASE }} --detach-sig "${dirname}/$filename"
                done
          - name: Upload Documentation Artifact
            uses: actions/upload-artifact@v4.4.3
            with:
                name: Docs-artifact
                path: documents/**.pdf
                
    kicad-pre:
        name: Find KiCAD Projects
        runs-on: ubuntu-latest
        outputs:
            projects: ${{ steps.find_Project.outputs.projectJSON }}
        steps:
          - name: Checkout
            uses: actions/checkout@v4.2.2
          - name: Find KiCAD Projects
            id: find_Project
            run: |
                KiCAD_PROJECTS=$(find . -type f -name "*.kicad_pro")
                if [ -z "$KiCAD_PROJECTS" ]; then
                    echo "projects=[]" >> "$GITHUB_OUTPUT"
                else
                    P_NAMES=$(echo $KiCAD_PROJECTS | sed "s/\(.*\)\.kicad_pro$/\1/")
                    KiCAD_PROJECTS_JSON=$(echo "$P_NAMES" | jq -R . | jq -s . | jq -c .)
                    echo "projectJSON=$KiCAD_PROJECTS_JSON" >> "$GITHUB_OUTPUT"
                fi
                echo $KiCAD_PROJECTS_JSON
    kicad:
        name: KiCAD Automation (KiBOT)
        needs: kicad-pre
        runs-on: ubuntu-latest
        strategy:
                matrix:
                    project: ${{ fromJSON(needs.kicad-pre.outputs.projects) }}
        steps:
          - name: Checkout
            uses: actions/checkout@v4.2.2
          - name: Run KiBOT
            uses: INTI-CMNB/KiBot@v2_k8
            with:
                config: .github/kibot_config.yaml
                schema: ${{matrix.project}}.kicad_sch
                board:  ${{matrix.project}}.kicad_pcb
                additional_args: "-E WORKSHEET=${{matrix.project}}.kicad_wks"
          - name: Upload Project Artifact
            uses: actions/upload-artifact@v4.4.3
            with:
                name: KiCAD_Build_${{strategy.job-index}}-artifact
                path: ${{matrix.project}}/build
    release:
        if: false
        name: Create Release
        runs-on: ubuntu-latest
        needs: [docs,kicad]
        steps:
          - name: Zip the Code Directory
            run: |
                if [ "$(ls -A /path/to/directory)" ]; then
                    zip -r Code.zip software
                fi
          - name: Delete Previous Release
            run: gh release delete latest --cleanup-tag
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          - name: Create Latest Release (always)
            uses: softprops/action-gh-release@v2.0.9
            with:
                files: |
                    **/*.zip
                    **/*.pdf
                name: Latest
                tag_name: latest
                make_latest: true
                body: Project Documents
          - name: Create Tagged Release (if push is tagged)
            if: startsWith(github.ref, 'refs/tags/')
            uses: softprops/action-gh-release@v2.0.9
            with:
                files: |
                    **/*.zip
                    **/*.pdf
                generate_release_notes: true
                make_latest: true
                body: Project Documents