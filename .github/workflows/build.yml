name: Standard Repo Workflow  

on: [push, workflow_dispatch]

permissions: write-all

jobs:
    docs:
        name: Compile Latex Documents
        runs-on: ubuntu-latest
        steps:
          - name: Checkout
            uses: actions/checkout@v4.2.2
          - name: Compile Latex documents
            uses: xu-cheng/latex-action@v3
            with:
                root_file: |
                    documents/*.tex
                    documents/*/*.tex
                work_in_root_file_dir: true
                continue_on_error: true
                latexmk_shell_escape: true
                latexmk_use_lualatex: true
          - name: Rename PDFs According to JobName
            run: |
                find . -type f -iname "*.pdf" | while read fname; do
                    dirname=`dirname $fname`
                    filename=`basename $fname`
                    texname=`echo $filename | sed 's/pdf/tex/'`
                    if [ -f '$dirname/$texname' ]; then
                        newname=`head -n 1 $dirname/$texname`
                        newname="${newname##*=}.pdf"
                        if [ $newname != '.pdf' ]; then
                            mv "${dirname}/$filename" "${dirname}/${newname}"
                        fi
                    fi
                done
          - name: Import GPG Key
            uses: crazy-max/ghaction-import-gpg@cb9bde2e2525e640591a934b1fd28eef1dcaf5e5
            env:
                secret_passphrase: ${{ secrets.PASSPHRASE }}
            if: ${{ env.secret_passphrase != '' }}
            with:
                gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
                passphrase: ${{ secrets.PASSPHRASE }}
                trust_level: 5
          - name: Digitally Sign PDF Documents
            env:
                secret_passphrase: ${{ secrets.PASSPHRASE }}
            if: ${{ env.secret_passphrase != '' }}
            run: |
                find . -type f -iname "*.pdf" | while read fname; do
                    dirname=`dirname $fname`
                    filename=`basename $fname`
                    gpg --pinentry-mode loopback --passphrase ${{ secrets.PASSPHRASE }} --clearsign --not-dash-escaped "${dirname}/$filename"
                    mv "${dirname}/$filename".asc "${dirname}/$filename"
                    gpg --pinentry-mode loopback --passphrase ${{ secrets.PASSPHRASE }} --detach-sig "${dirname}/$filename"
                done
          - name: Upload Docs Artifact
            uses: actions/upload-artifact@v4.4.3
            with:
                name: LATEX_Build-artifact
                path: |
                    documents
                    !documents/**.tex
                    !documents/**.cls
                    !documents/**.log
                    !documents/**.out
                    !documents/**.aux
                    !documents/**.fdb_latexmk
                    !documents/**.fls
                overwrite: true
    kicad-pre:
        name: Find KiCAD Projects
        runs-on: ubuntu-latest
        outputs:
            projects: ${{ steps.find_Project.outputs.projectJSON }}
        steps:
          - name: Checkout
            uses: actions/checkout@v4.2.2
          - name: Find KiCAD Projects
            id: find_Project
            run: |
                KiCAD_PROJECTS=$(find . -type f -name "*.kicad_pro")
                if [ -z "$KiCAD_PROJECTS" ]; then
                    echo "projects=[]" >> "$GITHUB_OUTPUT"
                else
                    P_NAMES=$(echo "$KiCAD_PROJECTS" | sed "s/\(.*\)\.kicad_pro$/\1/")
                    KiCAD_PROJECTS_JSON=$(echo "$P_NAMES" | jq -R . | jq -s . | jq -c .)
                    echo "projectJSON=$KiCAD_PROJECTS_JSON" >> "$GITHUB_OUTPUT"
                fi
    kicad:
        name: KiCAD Automation
        needs: kicad-pre
        runs-on: ubuntu-latest
        strategy:
                matrix:
                    project: ${{ fromJSON(needs.kicad-pre.outputs.projects) }}
        steps:
          - name: Checkout
            uses: actions/checkout@v4.2.2
          - name: Get Project Name
            run: |
                pname=$(basename ${{matrix.project}})
                echo "PROJECTNAME=$pname" >> $GITHUB_ENV
          - name: Get Project Worksheet
            run: |
                pdir=$(dirname ${{matrix.project}})
                pwks=${{matrix.project}}.kicad_wks
                if [ -f "$pwks" ]; then
                    echo "WORKSHEET=${{matrix.project}}.kicad_wks" >> $GITHUB_ENV
                    echo "true"
                else
                    echo "WORKSHEET=${pdir}/standard.kicad_wks" >> $GITHUB_ENV
                    echo "false"
                fi
          - name: Run KiBOT
            uses: INTI-CMNB/KiBot@v2_k8
            with:
                config: .github/kibot_config.yaml
                schema: ${{matrix.project}}.kicad_sch
                board:  ${{matrix.project}}.kicad_pcb
                dir: build/hardware/${{ env.PROJECTNAME }}
                additional_args: "-E WORKSHEET=${{ env.WORKSHEET }}"
          - name: Upload KiCAD Project Artifact
            if: ${{ always() }}
            uses: actions/upload-artifact@v4.4.3
            with:
                name: KiCAD_Build_${{strategy.job-index}}-artifact
                path: build
                overwrite: true
    code-pre:
        name: Find Code Projects
        runs-on: ubuntu-latest
        outputs:
            projects: ${{ steps.find_Project.outputs.codeJSON }}
        steps:
          - name: Checkout
            uses: actions/checkout@v4.2.2
          - name: Find Code Projects
            id: find_Project
            run: |
                CODE_FOLDERS=$(find ./firmware -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)
                P_NAMES=$(echo "$CODE_FOLDERS" | sed "s/\(.*\)\.kicad_pro$/\1/")
                CODE_FOLDERS_JSON=$(echo "$CODE_FOLDERS" | jq -R . | jq -s . | jq -c .)
                echo "codeJSON=$CODE_FOLDERS_JSON" >> "$GITHUB_OUTPUT"
    code:
        name: Compile Code
        needs: code-pre
        runs-on: ubuntu-latest
        strategy:
            matrix:
                project: ${{ fromJSON(needs.code-pre.outputs.projects) }}
        steps:
          - name: Checkout
            uses: actions/checkout@v4.2.2
          # - name: Build Binary (MPLABX-XC16)
            # uses: velocitek/ghactions-mplabx@master
            # with:
              # project: firmware.X
              # configuration: default
          - name: Upload Code Artifact
            if: ${{ always() }}
            uses: actions/upload-artifact@v4.4.3
            with:
                name: Code_Build_${{strategy.job-index}}-artifact
                path: |
                    build
                overwrite: true
    release:
        name: Create Release
        runs-on: ubuntu-latest
        needs: [docs,kicad,code]
        steps:
          - name: Download Artifacts
            uses: actions/download-artifact@v4.1.8
            with:
                merge-multiple: true
          - name: Restructure and Zip Files
            run: |
                if [ "$(ls -A hardware)" ]; then
                    zip -r Hardware.zip hardware
                fi
                if [ "$(ls -A firmware)" ]; then
                    zip -r Firmware.zip firmware
                fi
          - name: Delete Previous Release
            run: gh release delete latest --cleanup-tag --repo ${{ github.repository }}
            continue-on-error: true
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          - name: Create Latest Release (always)
            uses: softprops/action-gh-release@v2.0.9
            with:
                files: |
                    *.zip
                    *.pdf
                    hardware/**/docs/*bom.html
                    hardware/**/docs/*.pdf
                name: latest
                tag_name: latest
                make_latest: true
                body: Project Documents
          - name: Create Tagged Release (if push is tagged)
            if: startsWith(github.ref, 'refs/tags/')
            uses: softprops/action-gh-release@v2.0.9
            with:
                files: |
                    *.zip
                    *.pdf
                    hardware/**/docs/*bom.html
                    hardware/**/docs/*.pdf
                generate_release_notes: true
                make_latest: true
                body: Project Documents